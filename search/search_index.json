{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Homepage","text":"<p>Here you can find all the documentation/ notes of all my work.</p>"},{"location":"#contents","title":"Contents","text":"Page Name Content Custom-Python-Library Custom methods integrating famous and frequently used libraries. DateManager Custom methods used for datetime operations ExcelManager Custom methods for managing excel files. LogManager Custom methods for managing logs."},{"location":"Custom-Python-Library/","title":"Custom Python Library","text":"<p>Custom methods integrating famous and frequently used libraries.</p>"},{"location":"Custom-Python-Library/#installation","title":"<code>Installation</code>","text":"<pre><code>pip install RR-Custom-Python-Library\n</code></pre>"},{"location":"Custom-Python-Library/#logging","title":"<code>Logging</code>","text":"<p>All of the above class utilizes a logging mechanism provided by log_manager for capturing important events during the process. Ensure you have the appropriate logger configuration to capture and manage log messages effectively.</p>"},{"location":"Custom-Python-Library/#dependencies","title":"<code>Dependencies</code>","text":"<ul> <li>pandas: A powerful data manipulation library in Python used extensively for data analysis and manipulation.</li> <li>logging: The Python standard library module used for logging functionality.</li> </ul>"},{"location":"Custom-Python-Library/#author","title":"<code>Author</code>","text":"<ul> <li>This module is maintained by Ronak Rathore.</li> </ul>"},{"location":"DateManager/","title":"DateManager","text":"<p><code>To use the DateManager class, you need to import it and create an instance:</code></p> <p><pre><code>from date_manager.date_manager import DateManager\n\ndate_manager = DateManager(log_file='abc.log')\n</code></pre> - Arguments:     - log_file (str): log_file path. Defaults to './Custom-Python_Tools.log'</p>"},{"location":"DateManager/#timestamp_to_datedataframe-pddataframe-pddataframe","title":"<code>timestamp_to_date(dataframe: pd.DataFrame) -&gt; pd.DataFrame</code>","text":"<p>Converts datetime columns in a DataFrame to date type.</p> <ul> <li>Arguments:<ul> <li>dataframe (pd.DataFrame): The DataFrame containing the datetime columns.</li> </ul> </li> <li>Returns:<ul> <li>pd.DataFrame: The input DataFrame with the datetime columns converted to date type.</li> </ul> </li> </ul> <p><code>Example:</code> <pre><code>import pandas as pd\n\n# Create a sample DataFrame\ndata = {'datetime_column': ['2022-01-01', '2022-01-02', '2022-01-03']}\ndf = pd.DataFrame(data)\ndf['datetime_column'] = pd.to_datetime(df['datetime_column'])\n\n# Convert datetime columns to date\nconverted_df = date_manager.timestamp_to_date(df)\n</code></pre></p>"},{"location":"DateManager/#timestamp_to_date_columncolumn-str-dataframe-pddataframe-pddataframe","title":"<code>timestamp_to_date_column(column: str, dataframe: pd.DataFrame) -&gt; pd.DataFrame</code>","text":"<p>Converts a specific datetime column in a DataFrame to date type.</p> <ul> <li>Arguments:<ul> <li>column (str): The name of the datetime column to convert.</li> <li>dataframe (pd.DataFrame): The DataFrame containing the datetime column.</li> </ul> </li> <li>Returns:<ul> <li>pd.DataFrame: The input DataFrame with the specified datetime column converted to date type.</li> </ul> </li> <li>Raises:<ul> <li>ValueError: If the input DataFrame does not contain the specified datetime column.</li> </ul> </li> </ul> <p><code>Example:</code> <pre><code>import pandas as pd\n\n# Create a sample DataFrame\ndata = {'datetime_column': ['2022-01-01', '2022-01-02', '2022-01-03']}\ndf = pd.DataFrame(data)\ndf['datetime_column'] = pd.to_datetime(df['datetime_column'])\n\n# Convert specific datetime column to date\nconverted_df = date_manager.timestamp_to_date_column('datetime_column', df)\n</code></pre></p>"},{"location":"ExcelManager/","title":"ExcelManager","text":"<p><code>To use the ExcelManager class, you need to import it and create an instance:</code></p> <p><pre><code>from excel_manager.excel_manager import ExcelManager\nexcel_manager = ExcelManager(log_file='abc.log')\n</code></pre> - Arguments:     - log_file (str): log_file path. Defaults to './Custom-Python_Tools.log'</p>"},{"location":"ExcelManager/#get_dataframeself-workbook-str-sheet-str-pddataframe","title":"<code>get_dataframe(self, workbook: str, sheet: str) -&gt; pd.DataFrame</code>","text":"<p>Retrieve a pandas dataframe from an Excel workbook. - Args:     - workbook (str): The path to the Excel workbook.     - sheet (str): The name of the sheet containing the data. - Returns:     - pd.DataFrame: The contents of the specified sheet as a pandas dataframe. - Raises:     - FileNotFoundError: If the specified workbook cannot be found.     - Exception: If an unexpected error occurs.</p> <p><code>Example:</code> <pre><code>workbook = \"test.xlsx\"\nsheet = \"Sheet1\"\ndataframe = excel_manager.get_dataframe(workbook, sheet)\n</code></pre></p>"},{"location":"ExcelManager/#delete_sheetself-workbook-str-sheet-str-none","title":"<code>delete_sheet(self, workbook: str, sheet: str) -&gt; None</code>","text":"<p>Delete a sheet from an Excel workbook. ! There should be minimum 2 sheets in the workbook to perform this operation.</p> <ul> <li>Args:<ul> <li>workbook (str): The path to the Excel workbook.</li> <li>sheet (str): The name of the sheet to be deleted.</li> </ul> </li> <li>Returns:<ul> <li>None: Returns nothing.</li> </ul> </li> <li>Raises:<ul> <li>FileNotFoundError: If the specified workbook cannot be found.</li> <li>ValueError: If the specified sheet does not exist in the workbook.</li> <li>Exception: If an unexpected error occurs.</li> </ul> </li> </ul> <p><code>Example:</code> <pre><code>workbook = \"test.xlsx\"\nsheet = \"Sheet1\"\nexcel_manager.delete_sheet(workbook, sheet)\n</code></pre></p>"},{"location":"ExcelManager/#create_sheetself-workbook-str-sheet-str-none","title":"<code>create_sheet(self, workbook: str, sheet: str) -&gt; None</code>","text":"<p>Create a new sheet in an Excel workbook. - Args:     - workbook (str): The path to the Excel workbook.     - sheet (str): The name of the sheet to be created. - Raises:     - FileNotFoundError: If the specified workbook cannot be found.     - PermissionError: If the user does not have permission to write to the specified workbook.     - Exception: If an unexpected error occurs. - Returns:     - None: Returns nothing.</p> <p><code>Example:</code> <pre><code>workbook = \"test.xlsx\"\nsheet = \"Sheet1\"\nexcel_manager.create_sheet(workbook, sheet)\n</code></pre></p>"},{"location":"ExcelManager/#overwrite_sheetself-workbook-str-sheet-str-dataframe-pddataframe-none","title":"<code>overwrite_sheet(self, workbook: str, sheet: str, dataframe: pd.DataFrame) -&gt; None</code>","text":"<p>Overwrite the contents of an Excel sheet with a new dataframe. - Args:     - workbook (str): The path to the Excel workbook.     - sheet (str): The name of the sheet to be overwritten.     - dataframe (pd.DataFrame): The new contents of the sheet as a pandas dataframe. - Returns:     - None: Returns nothing. - Raises:     - FileNotFoundError: If the specified workbook cannot be found.     - PermissionError: If the user does not have permission to write to the specified workbook.     - ValueError: If the specified sheet does not exist in the workbook.     - Exception: If an unexpected error occurs.</p> <p><code>Example:</code> <pre><code>import pandas as pd\n\nworkbook = \"test.xlsx\"\nsheet = \"Sheet1\"\ndataframe = pd.DataFrame({\"a\": [1, 2, 3], \"b\": [4, 5, 6]})\nexcel_manager.overwrite_sheet(workbook, sheet, dataframe)     \n</code></pre></p>"},{"location":"ExcelManager/#reposition_sheetself-workbook-str-sheet-str-none","title":"<code>reposition_sheet(self, workbook: str, sheet: str) -&gt; None</code>","text":"<p>Moves a sheet at the start in the workbook and saves the changes. - Args:     - workbook (str): The path to the Excel workbook.     - sheet (str): The name of the sheet to be moved. - Raises:     - FileNotFoundError: If the specified workbook cannot be found.     - PermissionError: If the user does not have permission to write to the specified workbook.     - ValueError: If the specified sheet does not exist in the workbook.     - Exception: If an unexpected error occurs. - Returns:     - None: Returns nothing.</p> <p><code>Example:</code> <pre><code>workbook = \"test.xlsx\"\nsheet = \"Sheet1\"\nexcel_manager.reposition_sheet(workbook, sheet)\n</code></pre></p>"},{"location":"ExcelManager/#append_dataframeself-workbook-str-sheet-str-dataframe-pddataframe-password-str-none-none","title":"<code>append_dataframe(self, workbook: str, sheet: str, dataframe: pd.DataFrame, password: str = None) -&gt; None</code>","text":"<p>Appends a pandas dataframe to an Excel sheet. - Args:     - workbook (str): The path to the Excel workbook.     - sheet (str): The name of the sheet to which the dataframe will be appended.     - dataframe (pd.DataFrame): The pandas dataframe to be appended to the sheet.     - password (str, optional): The password for the Excel workbook, if it is protected. Defaults to None. - Raises:     - FileNotFoundError: If the specified workbook cannot be found.     - PermissionError: If the user does not have permission to write to the specified workbook.     - Exception: If an unexpected error occurs. - Returns:     - None: Returns nothing.</p> <p><code>Example:</code> <pre><code>import pandas as pd\n\nworkbook = \"test.xlsx\"\nsheet = \"Sheet1\"\ndataframe = pd.DataFrame({\"a\": [1, 2, 3], \"b\": [4, 5, 6]})\nexcel_manager.append_dataframe(workbook, sheet, dataframe)\n</code></pre></p>"},{"location":"ExcelManager/#modify_sheet_protectionself-filepath-str-sheetname-str-enable_protection-bool-password-str-none-none","title":"<code>modify_sheet_protection(self, filepath: str, sheetname: str, enable_protection: bool, password: str = None) -&gt; None</code>","text":"<p>Modifies the protection of an Excel sheet. - Args:     - filepath (str): The path to the Excel workbook.     - sheetname (str): The name of the sheet to be protected.     - enable_protection (bool): A boolean value indicating whether to enable or disable protection.     - password (str, optional): The password for the Excel workbook, if it is protected. Defaults to None. - Raises:     - FileNotFoundError: If the specified workbook cannot be found.     - PermissionError: If the user does not have permission to write to the specified workbook. - Returns:     - None: Returns nothing.</p> <p><code>Example:</code> <pre><code># to set the protection, 'abc' is password.\nworkbook = \"test.xlsx\"\nsheet = \"Sheet1\"\nexcel_manager.modify_sheet_protection(workbook, sheet, True, 'abc')\n\n# to remove the protection.\nworkbook = \"test.xlsx\"\nsheet = \"Sheet1\"\nexcel_manager.modify_sheet_protection(workbook, sheet, False)\n</code></pre></p>"},{"location":"LogManager/","title":"LogManager","text":"<p><code>The LogManager class provides a customizable logging utility in Python, allowing you to log messages of different severity levels to both a file and the console.</code></p>"},{"location":"LogManager/#features","title":"Features","text":"<ul> <li>Initialization of logging parameters such as log file name, log level, and log name.</li> <li>Logging of messages with severity levels including INFO, DEBUG, WARNING, ERROR, and CRITICAL.</li> <li>Configuration of logging to both file and console. Customizable log message format.</li> </ul> <p><code>To use the LogManager class, follow these steps:</code></p> <p><pre><code># Import the LogManager class:\nfrom log_manager.log_manager import LogManager\n\n# Create an instance of the LogManager class:\nlog_manager = LogManager()\n</code></pre> <code>By default, this initializes the logger with the following settings:</code> - Log file name: './Custom-Python_Tools.log' - Log level: logging.DEBUG - Log name: 'LogManager'</p> <p><code>Log messages with desired severity levels:</code> Use the appropriate methods to log messages with different severity levels: - info(message: str) - debug(message: str) - warning(message: str) - error(message: str) - critical(message: str)</p> <p><code>Example:</code> <pre><code>log_manager.info(\"This is an informational message.\")\nlog_manager.error(\"An error occurred!\")\n</code></pre></p> <p><code>Customize LogManager settings (optional):</code> You can customize the LogManager settings by providing parameters during initialization:</p> <pre><code>log_manager = LogManager(log_file='my_log.log', log_level=logging.INFO, log_name='MyLogger')\n</code></pre> <p><code>Logging Format</code></p> <p>The default logging format includes the following fields:</p> <ul> <li>Timestamp (%(asctime)s)</li> <li>Logger Name (%(name)s)</li> <li>Log Level (%(levelname)s)</li> <li>Log Message (%(message)s)</li> </ul> <p>You can modify the logging format by updating the formatter string in the init method of the LogManager class.</p>"}]}